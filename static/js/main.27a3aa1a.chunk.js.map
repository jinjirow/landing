{"version":3,"sources":["MainPage.js","serviceWorker.js","index.js"],"names":["about_copy","MainPage","AudioContext","props","state","page","getCurrentPage","bind","changePage","key","this","setState","About","Work","Releases","className","href","width","height","src","Navigation","onChangePage","Component","onClick","hidePage","style","seamless","TrackElement","path","title","url","element","Audio","time","setElementProperty","getElementProperty","propName","value","MediaController","trackPos","onSeek","ev","val","target","currentTrack","duration","currentElement","mclass","muted","track","onMute","type","onChange","min","max","PlayPause","showPlay","playTrack","onPlay","pauseTrack","onPause","MediaSelector","handleSelection","idx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27a3aa1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './MainPage.css';\nimport './index.css';\n\nconst about_copy = `software developer and part time producer`\n\nvar audioContext = new AudioContext();\n\nclass MainPage extends Component {\n  constructor(props){\n    super(props)\n    this.state = { page : \"About\" };\n    this.getCurrentPage = this.getCurrentPage.bind(this);\n    this.changePage = this.changePage.bind(this);\n  }\n  componentDidMount(){\n  }\n\n  changePage(key){\n    this.setState({ page: key });\n  }\n\n  getCurrentPage(){\n    switch(this.state.page){\n      case \"About\":\n        return <About />\n      case \"Software\":\n        return <Work />\n      case \"Audio\":\n        return <Releases />\n      default:\n        return null;\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"MainPage\">\n        <div className=\"display-flex flex-row\">\n          <h1>jinjirow</h1>\n          <div className=\"flex-1\" />\n          <a className=\"TitleIcon\" href=\"https://jinjirowmusic.bandcamp.com/\"><img width={20} height={20} src=\"./images/bandcamp.svg\" /></a>\n          <a className=\"TitleIcon\" href=\"https://github.com/jinjirow\"><img width={20} height={20} src=\"./images/github.svg\" /></a>\n          <a className=\"TitleIcon\" href=\"linkedin.com/in/john-welch-43869911b/\"><img width={20} height={20} src=\"./images/linkedin.svg\" /></a>\n          <a className=\"TitleIcon\" href=\"https://soundcloud.com/jinjirow\"><img width={20} height={20} src=\"./images/soundcloud.svg\" /></a>\n        </div>\n        <Navigation onChangePage={this.changePage}/>\n        <div className=\"PageContent\">\n        <About page={this.state.page} />\n        <Work page={this.state.page}/>\n        <Releases page={this.state.page}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction Navigation(props){\n  return(\n    <div className=\"display-flex flex-row\">\n        <div className=\"flex-1 justify-content-center\">\n          <span className=\"navigation-selector\" onClick={() => props.onChangePage(\"About\")}>About</span>\n        </div>\n        <div className=\"flex-1 justify-content-center\">\n          <span className=\"navigation-selector\" onClick={() => props.onChangePage(\"Software\")}>Software</span>\n        </div>\n        <div className=\"flex-1 justify-content-center\">\n          <span className=\"navigation-selector\" onClick={() => props.onChangePage(\"Audio\")}>Audio</span>\n        </div>\n    </div>\n  )\n}\n\nfunction About(props){\n  const hidePage = props.page !== \"About\" ? \"display-none\" : \"\";\n  return(\n    <div className={\"padding-40 \" + hidePage}>\n      {  about_copy }\n    </div>\n  )\n}\n\nfunction Work(props){\n  const hidePage = props.page !== \"Software\" ? \"display-none\" : \"\";\n  return(\n    <div className={\"align-self-center \" + hidePage} >\n      <div className=\"LinkBox\">\n        <a className=\"link\" href=\"https://github.com/jinjirow/RhymEZ\">RhymEZ</a>\n        <br/>\n        <a className=\"link\" href=\"http://www.taittowers.com/iq-navigator/\">iQ</a> - TAIT\n      </div>\n    </div>\n  )\n}\n\nfunction Releases(props){\n  const hidePage = props.page !== \"Audio\" ? \"display-none\" : \"\";\n  return(\n    <div className={\"display-flex \" + hidePage}>\n      <div className=\"flex-1\" />\n      <iframe style={{\"border\":\"0\", \"width\":\"700px\", \"height\":\"372px\"}} src=\"https://bandcamp.com/EmbeddedPlayer/album=3631184832/size=large/bgcol=ffffff/linkcol=7137dc/artwork=small/transparent=true/\" seamless>\n        <a href=\"http://jinjirowmusic.bandcamp.com/album/arbor\">arbor by jinjirow</a>\n      </iframe>\n      <div className=\"flex-1\" />\n    </div>\n  );\n}\n\nclass TrackElement{\n  constructor(path, title){\n    this.url = path;\n    this.title = title;\n    this.element = new Audio(path);\n    this.time = 0.00;\n    this.setElementProperty = this.setElementProperty.bind(this);\n    this.getElementProperty = this.getElementProperty.bind(this);\n  }\n  setElementProperty(propName, value){\n    this.element[propName] = value;\n  }\n  getElementProperty(propName){\n    return this.element[propName];\n  }\n}\n\nclass MediaContentContainer extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      selectedTrack: null,\n      audioElements: {},\n      showPlay: false,\n      tracks: null,\n      muted: false,\n      playing: false,\n      volume: 0.5\n    };\n    this.handleSelection = this.handleSelection.bind(this);\n    this.pauseTrack = this.pauseTrack.bind(this);\n    this.playTrack = this.playTrack.bind(this);\n    this.toggleMute = this.toggleMute.bind(this);\n    this.createElements = this.createElements.bind(this);\n    this.getSelectedTrack = this.getSelectedTrack.bind(this);\n  }\n  handleSelection(trackIdx){\n    const track = this.state.tracks[trackIdx].element;\n    this.pauseAllTracks();\n    track.play();\n    this.setState({selectedTrack: trackIdx, playing: true});\n  }\n\n  createElements(){\n    let elements = [];\n    let tracks = this.props.media.tracks;\n\n    for(var ti in tracks){\n      const track = tracks[ti];\n      elements.push(new TrackElement(track.path, track.title));\n    }\n\n    this.setState({tracks: elements});\n\n  }\n\n  getSelectedTrack(){\n    return this.state.tracks[this.state.selectedTrack];\n  }\n\n  toggleMute(){\n    const element = this.getSelectedTrack();\n    const vol = this.state.muted ? 0 : this.state.volume;\n    this.state.muted = !this.state.muted;\n    element.setElementProperty(\"volume\", vol);\n  }\n\n  pauseTrack(){\n    const element = this.state.tracks[this.state.selectedTrack].element;\n    element.pause();\n    this.setState({showPlay: true, playing: false});\n  }\n\n  playTrack(){\n    const element = this.state.tracks[this.state.selectedTrack].element;\n    element.play();\n    this.setState({showPlay: false, playing: true});\n  }\n\n  pauseAllTracks(){\n    for(var ti in this.state.tracks){\n        const track = this.state.tracks[ti].element;\n        track.pause();\n    }\n  }\n\n  componentDidMount(){\n    this.createElements();\n  }\n\n  render(){\n    var element = null;\n    var track = null;\n    if(this.state.tracks !== null && this.state.selectedTrack !== null){\n      element = this.state.tracks[this.state.selectedTrack].element;\n      track = this.state.tracks[this.state.selectedTrack];\n    }\n    return(\n      <div className=\"MediaContentContainer\">\n        <div className=\"Selector\">\n          <img src={this.props.media.cover} />\n          <div className=\"MediaContent\">\n            <div className=\"ProjectTitle\">\n              {this.props.media.projectName}\n            </div>\n            <div className=\"overflow-y-auto\">\n              {this.props.media.tracks.map((track, index) =>\n                <MediaSelector\n                track={track}\n                currentTrack={track}\n                handleSelection={this.handleSelection}\n                idx={index}/>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {this.state.selectedTrack &&\n          <MediaController\n          currentElement={element}\n          currentTrack={track}\n          showPlay={this.state.showPlay}\n          track={this.props.media.tracks[this.state.selectedTrack]}\n          playing={this.state.playing}\n          onPlay={this.playTrack}\n          onPause={this.pauseTrack}\n          onMute={this.toggleMute}\n          />\n        }\n      </div>\n    )\n  }\n}\n\nclass MediaController extends Component {\n  constructor(props){\n    super(props)\n    this.state = {trackPos: 0};\n    this.onSeek = this.onSeek.bind(this);\n  }\n  onSeek(ev){\n    const val = ev.target.value;\n    const track = this.props.currentTrack;\n    track.setElementProperty(\"currentTime\", val);\n    this.setState({trackPos: val});\n  }\n  render(){\n    const duration = this.props.currentElement.duration\n    const mclass = this.props.muted ? <span>M</span> : <span>UM</span>\n    return(\n      <div className=\"Controller\">\n        <span>{this.props.track.title}</span>\n        <span onClick={this.props.onMute}>\n          { mclass }\n        </span>\n        <input type=\"range\" onChange={this.onSeek} min={0} max={duration} value={this.state.trackPos} className=\"SeekControl flex-1\" />\n        <PlayPause showPlay={this.props.showPlay} playTrack={this.props.onPlay} pauseTrack={this.props.onPause} />\n      </div>\n    )\n  }\n}\n\nfunction MediaSelector(props) {\n  let duration = null;\n  return(\n    <div className=\"MediaSelector\" onClick={() => props.handleSelection(props.idx)}>\n      <span>{props.track.title}</span>\n      <div className=\"flex-1\" />\n      <span className=\"padding-right-30\">{duration}</span>\n    </div>\n  )\n}\n\nfunction PlayPause(props) {\n  const showPlay = props.showPlay;\n  const callback = showPlay ? props.playTrack : props.pauseTrack;\n  return(\n    <div className=\"ControlButton\">\n      { showPlay ? <span onClick={() => props.playTrack()}>pl</span> : <span onClick={() => props.pauseTrack() }>pa</span> }\n    </div>\n  )\n}\n\nexport default MainPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainPage from './MainPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}